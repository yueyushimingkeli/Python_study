# This is about learn forin of pythondef work1():	magicians = ['alice', 'david', 'carolina']	for magician in magicians:		print(f"{magician.title()}, that was a great trick!")#IndentationError: expected an indented blockwork1()def work2():	"""	动手试一试	练习4-1：比萨  想出至少三种你喜欢的比萨，将其名称存储在一个列表中，再使用for循环将每种比萨的名称打印出来。		修改这个for 循环，使其打印包含比萨名称的句子，而不 仅仅是比萨的名称。对于每种比萨，都显示一行输出，下 面是一个例子。		I like pepperoni pizza.		在程序末尾添加一行代码，它不在for 循环中，指出你有 多喜欢比萨。输出应包含针对每种比萨的消息，还有一个 总结性句子，下面是一个例子。		I really love pizza!	练习4-2：动物 　想出至少三种有共同特征的动物，将其名称 存储在一个列表中，再使用for 循环将每种动物的名称打印出 来。		修改这个程序，使其针对每种动物都打印一个句子，下面 是一个例子。			A dog would make a great pet.		在程序末尾添加一行代码，指出这些动物的共同之处，如 打印下面这样的句子。		Any of these animals would make a great pet!		"""	pizzas = ['pineapple', 'cheese', 'hotdog']	for pizza in pizzas:		print(f'I like {pizza} pizza')	print('I really love pizza')	animals = ['dog', 'cat', 'horse', 'pig', 'cow', 'bird', 'sheep', 'chicken', 'duck', 'swift','fish', 'mouse', 'panda', 'bug', 'lion', 'tiger','monkey', 'owl']	for  animal in animals:		msg = f'A {animal.title()} would make a great pet'		print(msg)	print('Any of these animals would make a great pet')# work2()def work3():	for x in range(1,6):		print(x)	for x in range(1, 11, 2):		print(x)	numbers = list(range(1,6))	print(numbers)	squares = []	for value in range(1,11):		squares.append(value**2)	print(squares)	print(min(squares))	print(max(squares))	print(sum(squares))	squares2 = [value**2 for value in range(1,11)]	print(squares2)# work3()def work4():	"""	动手试一试	练习4-3：数到20 　使用一个for 循环打印数1～20（含）。	练习4-4：一百万 　创建一个包含数1～1 000 000的列表，再使用一个for循环将这些数打印出来。（如果输出的时间太长， 按Ctrl + C停止输出或关闭输出窗口。）	练习4-5：一百万求和 　创建一个包含数1～1 000 000的列 表，再使用min() 和max() 核实该列表确实是从1开始、到1 000 000结束的。另外，对这个列表调用函数sum() ，看看 Python将一百万个数相加需要多长时间。	练习4-6：奇数 　通过给函数range() 指定第三个参数来创建 一个列表，其中包含1～20的奇数，再使用一个for 循环将这 些数打印出来。	练习4-7：3的倍数 　创建一个列表，其中包含3～30能被3整除 的数，再使用一个for 循环将这个列表中的数打印出来。	练习4-8：立方 　将同一个数乘三次称为立方 。例如，在 Python中，2的立方用2**3 表示。请创建一个列表，其中包含 前10个整数（1～10）的立方，再使用一个for 循环将这些立 方数打印出来。	练习4-9：立方解析 　使用列表解析生成一个列表，其中包含 前10个整数的立方。	"""	numbers = list(range(1,21))	print(numbers)	numbers2 = list(range(1, 1_000_001))	# print(numbers2)	print(max(numbers2))	print(min(numbers2))	print(sum(numbers2))	oddNumbers = list(range(1,20,2))	print(oddNumbers)	numbers3 = list(range(3,31,3))	numbers3 = [value*3 for value in range(1,11)]	print(numbers3)	numbers4 = [value**3 for value in range(1,11)]	print(numbers4)	"""	总结: 列表解析构建代码  list = [ f(x)  for x in range(a,b,c)]. or [f(x) for x in listA]	range(a,b,c) :  a,b,c 均为number  a为起点 b是终点  c是递增间隔,不传值默认为1		复习: 1_000_000 输入法,使用_区分长度	"""# work4()#切片def work5():	players = ['charles', 'martina', 'michael', 'florence', 'eli']	print(players)	print(players[0:3])	print(players[1:4])	numbers = list(range(1,11))	print(numbers)	print(numbers[0:5])	print(numbers[5:10])	print(numbers[:4])	print(numbers[6:])	print(numbers[-2:])	for number in numbers[-3:]:		print(number)	myFoods = ['pizza', 'falafel', 'carrot cake']	friendFoods = myFoods[:]	myFoods.append('sandwich')	friendFoods.insert(0, 'watermelon')	print(myFoods)	print(friendFoods)# work5()def work6():	"""	动手试一试练习4-10：切片 　选择你在本章编写的一个程序，在末尾添加 几行代码，以完成如下任务。	打印消息“The first three items in the list are:”，再使用切片 来打印列表的前三个元素。 	打印消息“Three items from the middle of the list are:”，再使 用切片来打印列表的中间三个元素。 	打印消息“The last three items in the list are:”，再使用切片 来打印列表的末尾三个元素。练习4-11：你的比萨，我的比萨 　在你为完成练习4-1而编写 的程序中，创建比萨列表的副本，并将其赋给变量 friend_pizzas ，再完成如下任务。	在原来的比萨列表中添加一种比萨。 	在列表friend_pizzas 中添加另一种比萨。 	核实有两个不同的列表。为此，打印消息“My favorite pizzas are:”，再使用一个for循环来打印第一个列表；打印消息“My friend's favorite pizzas are:”，再使用一个for循环来打印第二个列表。核实新增的比萨被添加到了正确 的列表中。练习4-12：使用多个循环 　在本节中，为节省篇幅，程序 foods.py的每个版本都没有使用for 循环来打印列表。请选择 一个版本的foods.py，在其中编写两个for 循环，将各个食品 列表打印出来。	"""	numbers = list(range(1,101))	msg = "The first three items in the list are: {}"	print(msg.format(numbers[:3]))	msg2 = "The items from the middle of the list are: {}"	middleIndex = int(len(numbers)/3)-1	print(msg2.format(numbers[middleIndex:middleIndex+3]))	msg3 = "The last three items in the list are: {}"	print(msg3.format(numbers[-3:]))work6()